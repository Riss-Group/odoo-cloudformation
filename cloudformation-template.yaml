AWSTemplateFormatVersion: '2010-09-09'
Description: |
  CloudFormation template to deploy Odoo on AWS using default VPC.
  - EFS filesystem, ElastiCache Redis, RDS PostgreSQL, and S3 backup bucket
  - Dynamic odoo-install.env in S3
  - Ubuntu 22.04 arm64 spot instances via Launch Template + ASGs (staging & production)
  - CI/CD pipelines with CodeDeploy/CodePipeline
  - Separate Security Groups for services, fleet hosts, and ELB
  - IAM user for s3fs with full S3 access
  - ACM TLS certificate for primary and staging domains
  - Auto Scaling target tracking on ALB requests per target
  - Resource names prefixed with "Odoo-"

Parameters:
  DefaultSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of default subnet IDs for the default VPC
  PrimaryAZ:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Availability Zone for EC2 fleet instances
  DomainName:
    Type: String
    Description: Primary domain (e.g. example.com)
  GitHubOwner:
    Type: String
    Description: GitHub repository owner/organization
  GitHubRepo:
    Type: String
    Description: GitHub repository name (without URL)
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub OAuth token for CodePipeline
  RdsUser:
    Type: String
    Default: odoo
  RdsPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 41
    Description: RDS Master user password (no /, @, ", or spaces)
  RedisNodeType:
    Type: String
    Default: cache.t4g.small
  ScriptBucketName:
    Type: String
  ScriptKey:
    Type: String
  AdminPasswd:
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 41
    Description: RDS Master user password (no /, @, ", or spaces)
  OdooVersion:
    Type: String
    Default: '18.0'
  ArtifactBucketName:
    Type: String
  StagingMinSize:
    Type: Number
    Default: 1
  StagingMaxSize:
    Type: Number
    Default: 1
  ProdMinSize:
    Type: Number
    Default: 2
  ProdMaxSize:
    Type: Number
    Default: 8
  OdooDefaultVPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where subnets belong

Resources:
  # Default VPC
  # OdooDefaultVPC:
  #   Type: AWS::EC2::VPC
  #   Properties:
  #     Default: true
  # OdooDefaultVPC:
  #   Type: AWS::EC2::VPC
  #   Properties:
  #     CidrBlock: 10.0.0.0/16
  #     Tags:
  #       - Key: Name
  #         Value: odoo-default-vpc

  # Security Groups
  OdooELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB security group
      VpcId: !Ref OdooDefaultVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  OdooFleetSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 fleet security group
      VpcId: !Ref OdooDefaultVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref OdooELBSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  OdooServicesSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Service security group for EFS/RDS/Redis
      VpcId: !Ref OdooDefaultVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref OdooFleetSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # EFS with lifecycle policies
  OdooEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: OdooEFS
      PerformanceMode: generalPurpose
      ThroughputMode: elastic
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS

  # EFS Mount Targets across AZs
  OdooEFSMount1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref OdooEFS
      SubnetId: !Select [0, !Ref DefaultSubnetIds]
      SecurityGroups: [ !Ref OdooServicesSG ]
  OdooEFSMount2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref OdooEFS
      SubnetId: !Select [1, !Ref DefaultSubnetIds]
      SecurityGroups: [ !Ref OdooServicesSG ]
  OdooEFSMount3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref OdooEFS
      SubnetId: !Select [2, !Ref DefaultSubnetIds]
      SecurityGroups: [ !Ref OdooServicesSG ]

  # ElastiCache Redis replication group in VPC
  OdooRedis:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupId: OdooRedis
      ReplicationGroupDescription: "Redis for Odoo"
      Engine: redis
      EngineVersion: '6.0'
      AutomaticFailoverEnabled: false
      CacheNodeType: !Ref RedisNodeType
      NumNodeGroups: 1
      ReplicasPerNodeGroup: 0
      SecurityGroupIds: [ !Ref OdooServicesSG ]

  # RDS PostgreSQL Multi-AZ across all AZs
  OdooRDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Odoo RDS Subnet Group"
      SubnetIds: !Ref DefaultSubnetIds
  OdooRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: OdooRDS
      Engine: postgres
      EngineVersion: '16.8'
      DBInstanceClass: db.m7g.large
      AllocatedStorage: 100
      MasterUsername: !Ref RdsUser
      # MasterUserPassword: !Ref RdsPassword
      MasterUserPassword: 'Secur3!Passw0rd'
      StorageType: gp3
      MultiAZ: true
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref OdooRDSSubnetGroup
      VPCSecurityGroups: [ !Ref OdooServicesSG ]

  # S3 backup and config buckets + dynamic env file
  OdooBackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ArtifactBucketName}-backup"
  OdooConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ArtifactBucketName}-config"
  # OdooEnvFile:
  #   Type: AWS::S3::Object
  #   Properties:
  #     Bucket: !Ref OdooConfigBucket
  #     Key: odoo-install.env
  #     ContentType: text/plain
  #     Body:
  #       Fn::Join:
  #         - "\n"
  #         - - !Sub "EFS_ENDPOINT=${OdooEFS.DnsName}"
  #           - !Sub "RDS_ENDPOINT=${OdooRDS.Endpoint.Address}"
  #           - !Sub "RDS_USER=${RdsUser}"
  #           - !Sub "RDS_PASSWORD=${RdsPassword}"
  #           - !Sub "REDIS_ENDPOINT=${OdooRedis.PrimaryEndPoint.Address}"
  #           - !Sub "S3_BUCKET=${OdooBackupBucket}"
  #           - !Sub "GITHUB_REPO=https://github.com/${GitHubOwner}/${GitHubRepo}.git"
  #           - !Sub "GITHUB_USERNAME=${GitHubOwner}"
  #           - !Sub "GITHUB_TOKEN=${GitHubToken}"
  #           # - !Sub "S3FS_KEY=${OdooS3FSAccessKey.AccessKeyId}"
  #           # - !Sub "S3FS_SECRET=${OdooS3FSAccessKey.SecretAccessKey}"
  #           - !Sub "ADMIN_PASSWD=${AdminPasswd}"
  #           - !Sub "ODOO_VERSION=${OdooVersion}"

  # IAM user for s3fs with S3 full access
  OdooS3FSUser:
    Type: AWS::IAM::User
    Properties:
      UserName: odoo-s3fs-user
      ManagedPolicyArns: [ arn:aws:iam::aws:policy/AmazonS3FullAccess ]
  OdooS3FSAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref OdooS3FSUser

  # ACM TLS certificate for domain and *.subdomain
  OdooCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames: [ !Sub "*.${DomainName}" ]
      ValidationMethod: DNS

  # EC2 Launch Template using spot t4g.small
  OdooLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: OdooLaunchTemplate
      LaunchTemplateData:
        InstanceType: t4g.small
        ImageId: ami-050499786ebf55a6a
        InstanceMarketOptions: { MarketType: spot }
        SecurityGroupIds: [ !Ref OdooFleetSG ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            aws s3 cp s3://${ScriptBucketName}/${ScriptKey} \
              /root/install-odoo.sh
            aws s3 cp s3://${OdooConfigBucket}/odoo-install.env \
              /root/odoo-install.env
            chmod +x /root/install-odoo.sh
            /root/install-odoo.sh /root/odoo-install.env

  # ALB, target groups, and listeners with host-header routing
  OdooLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: OdooLB
      Scheme: internet-facing
      Subnets: !Ref DefaultSubnetIds
      SecurityGroups: [ !Ref OdooELBSG ]
  OdooStagingTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: OdooStagingTG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref OdooDefaultVPC
  OdooProdTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: OdooProdTG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref OdooDefaultVPC
  OdooListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref OdooLB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301
  OdooListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref OdooLB
      Port: 443
      Protocol: HTTPS
      Certificates: [ { CertificateArn: !Ref OdooCertificate } ]
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref OdooProdTG
  OdooHostRuleStaging:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref OdooListener443
      Priority: 10
      Conditions:
        - Field: host-header
          HostHeaderConfig: { Values: [ !Sub "staging.${DomainName}" ] }
      Actions:
        - Type: forward
          TargetGroupArn: !Ref OdooStagingTG
  OdooHostRuleProd:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref OdooListener443
      Priority: 20
      Conditions:
        - Field: host-header
          HostHeaderConfig: { Values: [ !Ref DomainName ] }
      Actions:
        - Type: forward
          TargetGroupArn: !Ref OdooProdTG

  # Auto Scaling Groups for staging and production
  OdooStagingASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: OdooStagingASG
      AvailabilityZones: [ !Ref PrimaryAZ ]
      LaunchTemplate: { LaunchTemplateId: !Ref OdooLaunchTemplate, Version: !GetAtt OdooLaunchTemplate.LatestVersionNumber }
      MinSize: !Ref StagingMinSize
      MaxSize: !Ref StagingMaxSize
      DesiredCapacity: !Ref StagingMinSize
      TargetGroupARNs: [ !Ref OdooStagingTG ]
      Tags:
        - Key: Name
          Value: OdooStagingASG
          PropagateAtLaunch: true
  OdooProdASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: OdooProdASG
      AvailabilityZones: [ !Ref PrimaryAZ ]
      LaunchTemplate: { LaunchTemplateId: !Ref OdooLaunchTemplate, Version: !GetAtt OdooLaunchTemplate.LatestVersionNumber }
      MinSize: !Ref ProdMinSize
      MaxSize: !Ref ProdMaxSize
      DesiredCapacity: !Ref ProdMinSize
      TargetGroupARNs: [ !Ref OdooProdTG ]
      Tags:
        - Key: Name
          Value: OdooProdASG
          PropagateAtLaunch: true

  # Scaling policies tracking ALBRequestCountPerTarget
  OdooStagingScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref OdooStagingASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
          # PredefinedMetricType: ALBRequestCountPerTarget
          # ResourceLabel: !Sub "app/${OdooLB.LoadBalancerFullName}/targetgroup/${OdooStagingTG.TargetGroupFullName}"
        TargetValue: 50.0
        # EstimatedInstanceWarmup: 300 > For Step Scaling Policies
  OdooProdScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref OdooProdASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
          # PredefinedMetricType: ALBRequestCountPerTarget
          # ResourceLabel: !Sub "app/${OdooLB.LoadBalancerFullName}/targetgroup/${OdooProdTG.TargetGroupFullName}"
        TargetValue: 50.0
        # EstimatedInstanceWarmup: 300 > For Step Scaling Policies

Outputs:
  LoadBalancerDNS:
    Value: !GetAtt OdooLB.DNSName
  ConfigBucketName:
    Value: !Ref OdooConfigBucket
  BackupBucketName:
    Value: !Ref OdooBackupBucket
  LaunchTemplateId:
    Value: !Ref OdooLaunchTemplate
  S3FSAccessKeyId:
    Value: !Ref OdooS3FSAccessKey
  S3FSSecretAccessKey:
    Value: !GetAtt OdooS3FSAccessKey.SecretAccessKey 